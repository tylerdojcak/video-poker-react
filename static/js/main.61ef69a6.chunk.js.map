{"version":3,"sources":["Components/Card/Card.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","selected","rank","suit","style","backgroundImage","image","onClick","handleSelectCard","index","App","useState","hand","setHand","disabled","setDisabled","evaluation","setEvaluation","a","newHand","fetch","then","res","json","cards","cardObj","newCard","value","push","updatedHand","slice","card","evaluate","map","index0","isFlush","suits","Set","size","isFiveHighStraight","fiveHighStraight","ranks","sort","every","v","i","isStraight","counts","Number","Object","values","length","includes","isMultiCard","currentHand","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61ef69a6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nexport default function Card(props) {\r\n  function handleClick() {\r\n    props.handleSelectCard(props.index);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={props.selected ? \"card selected\" : \"card\"}\r\n      rank={props.rank}\r\n      suit={props.suit}\r\n      selected={props.selected}\r\n      style={{ backgroundImage: `url(${props.image})` }}\r\n      onClick={handleClick}\r\n    ></div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Card from \"./Components/Card/Card\";\n\nfunction App() {\n  let [hand, setHand] = useState([]);\n  let [disabled, setDisabled] = useState(true);\n  let [evaluation, setEvaluation] = useState(\"\");\n\n  async function drawFive() {\n    setEvaluation(\"\");\n    setHand([]);\n    let newHand = [];\n    await fetch(\"https://deckofcardsapi.com/api/deck/alanuelczxce/shuffle/\");\n    fetch(\"https://deckofcardsapi.com/api/deck/alanuelczxce/draw/?count=5\")\n      .then((res) => res.json())\n      .then((res) => {\n        for (let cardObj of res.cards) {\n          let newCard = {\n            value: cardObj.value,\n            suit: cardObj.suit,\n            image: cardObj.image,\n            selected: false\n          };\n          newHand.push(newCard);\n        }\n        setHand(newHand);\n        setDisabled(!disabled);\n      });\n  }\n\n  async function reDraw() {\n    const updatedHand = hand.slice();\n    for (let card of updatedHand) {\n      if (card.selected) {\n        await fetch(\n          \"https://deckofcardsapi.com/api/deck/alanuelczxce/draw/?count=1\"\n        )\n          .then((res) => res.json())\n          .then((res) => {\n            card.value = res.cards[0].value;\n            card.suit = res.cards[0].suit;\n            card.image = res.cards[0].image;\n            card.selected = false;\n            /*card = {\n              value: res.cards[0].value,\n              suit: res.cards[0].suit,\n              image: res.cards[0].image,\n              selected: false\n            };*/\n          });\n      }\n    }\n    setHand(updatedHand);\n    setDisabled(!disabled);\n    evaluate(hand);\n  }\n\n  function handleSelectCard(index) {\n    const updatedHand = hand.map((card, index0) => {\n      if (index === index0) {\n        return {\n          ...card,\n          selected: !card.selected\n        };\n      } else {\n        return card;\n      }\n    });\n\n    setHand(updatedHand);\n  }\n\n  function isFlush(hand) {\n    let suits = [];\n    for (let card of hand) {\n      suits.push(card.suit);\n    }\n    return new Set(suits).size === 1;\n  }\n\n  function isFiveHighStraight(\n    hand,\n    fiveHighStraight = [\"2\", \"3\", \"4\", \"5\", \"ACE\"]\n  ) {\n    let ranks = [];\n    for (let card of hand) {\n      ranks.push(card.value);\n    }\n    ranks.sort();\n    return ranks.every((v, i) => v === fiveHighStraight[i]);\n  }\n\n  function isStraight(hand, counts) {\n    let ranks = [];\n    for (let card of hand) {\n      if (card.value === \"JACK\") {\n        ranks.push(11);\n      } else if (card.value === \"QUEEN\") {\n        ranks.push(12);\n      } else if (card.value === \"KING\") {\n        ranks.push(13);\n      } else if (card.value === \"ACE\") {\n        ranks.push(14);\n      } else {\n        ranks.push(Number(card.value));\n      }\n    }\n    ranks.sort();\n    return ranks[4] - ranks[0] === 4 && Object.values(counts).length === 5;\n  }\n\n  function isMultiCard(hand, counts) {\n    if (Object.values(counts).length === 2) {\n      if (Object.values(counts).includes(1)) {\n        return \"FOUR OF A KIND!\";\n      } else {\n        return \"FULL HOUSE!\";\n      }\n    } else if (Object.values(counts).length === 3) {\n      if (Object.values(counts).includes(3)) {\n        return \"THREE OF A KIND!\";\n      } else {\n        return \"TWO PAIR!\";\n      }\n    } else if (Object.values(counts).length === 4) {\n      return \"PAIR!\";\n    } else {\n      return \"High card! Try again!\";\n    }\n  }\n\n  function evaluate(hand) {\n    let counts = {};\n    for (let card of hand) {\n      if (card.value in counts) {\n        counts[card.value] += 1;\n      } else {\n        counts[card.value] = 1;\n      }\n    }\n    if (\n      isFlush(hand) &&\n      (isFiveHighStraight(hand) || isStraight(hand, counts))\n    ) {\n      setEvaluation(\"STRAIGHT FLUSH!\");\n    } else if (isFlush(hand)) {\n      setEvaluation(\"FLUSH!\");\n    } else if (isFiveHighStraight(hand) || isStraight(hand, counts)) {\n      setEvaluation(\"STRAIGHT!\");\n    } else {\n      setEvaluation(isMultiCard(hand, counts));\n    }\n  }\n\n  let currentHand = hand.map((card, i) => (\n    <Card\n      key={i}\n      index={i}\n      rank={card.value}\n      suit={card.suit}\n      image={card.image}\n      selected={card.selected}\n      handleSelectCard={handleSelectCard}\n    />\n  ));\n\n  return (\n    <>\n      <div className=\"App\">{currentHand}</div>\n      <div className=\"button-container\">\n        <button onClick={drawFive} disabled={!disabled}>\n          DEAL\n        </button>\n        <button onClick={reDraw} disabled={disabled}>\n          REDRAW\n        </button>\n      </div>\n      <div className=\"evaluation\">{evaluation}</div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}